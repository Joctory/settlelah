rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Common validation functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isValidEmailFormat(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    function isValidPasscodeFormat(passcode) {
      return passcode is string && passcode.size() == 6 && passcode.matches('^[0-9]{6}$');
    }
    
    function rateLimitCheck() {
      // Basic rate limiting - in production, implement more sophisticated rate limiting
      return request.time.toMillis() > 0;
    }
    
    function isValidBillData() {
      let requiredFields = ['members', 'dishes', 'breakdown', 'timestamp', 'perPersonBreakdown', 'totals'];
      let hasRequiredFields = requiredFields.hasAll(request.resource.data.keys());
      
      // Validate dishes array structure
      let validDishes = request.resource.data.dishes.size() > 0 && 
                         request.resource.data.dishes is list;
                         
      // Validate members array structure
      let validMembers = request.resource.data.members.size() > 0 && 
                          request.resource.data.members is list;
                          
      // Timestamp validation
      let validTimestamp = request.resource.data.timestamp is number &&
                           request.resource.data.timestamp <= request.time.toMillis();
      
      return hasRequiredFields && validDishes && validMembers && validTimestamp;
    }
    
    function isBillExpired() {
      // Bill expires after 30 days (2592000000 milliseconds)
      let maxAge = 2592000000;
      return resource.data.timestamp + maxAge < request.time.toMillis();
    }
    
    function isValidBillId(billId) {
      // Validate the bill ID format (timestamp-randomBytes-matterHash or legacy 6-char)
      let newPattern = billId.matches('^[a-zA-Z0-9]+-[a-zA-Z0-9]+-[a-zA-Z0-9]+$');
      let legacyPattern = billId.matches('^[a-zA-Z0-9]{6}$');
      return newPattern || legacyPattern;
    }
    
    // Rules for bills collection - Development Balance
    match /bills/{billId} {
      // Allow reading bills if the ID format is valid and not expired
      allow get: if isValidBillId(billId) && !isBillExpired();
      
      // Allow bill listing with limits
      allow list: if request.query.limit <= 50;
      
      // Allow bill creation with basic validation (compatible with tests)
      allow create: if isValidBillId(billId) && 
                     request.resource.data.timestamp is number &&
                     request.resource.data.members is list &&
                     request.resource.data.dishes is list &&
                     request.resource.data.members.size() <= 20 && // Max 20 members
                     request.resource.data.dishes.size() <= 100; // Max 100 dishes
      
      // Deny bill deletion for security (no deletions allowed)
      allow delete: if false;
      
      // No updates allowed - bills are immutable after creation
      allow update: if false;
      
      // Restrict sub-collections access
      match /{document=**} {
        allow read: if isValidBillId(billId);
        allow write: if false; // No writes to sub-collections
      }
    }
    
    // Rules for users collection - Development Balance
    match /users/{userId} {
      function isValidUserData() {
        let requiredFields = ['name', 'email', 'passcode', 'created_at'];
        let hasRequiredFields = requiredFields.hasAll(request.resource.data.keys());
        
        let validName = request.resource.data.name is string && 
                        request.resource.data.name.size() >= 2 && 
                        request.resource.data.name.size() <= 100;
        let validTimestamp = request.resource.data.created_at is number &&
                             request.resource.data.created_at <= request.time.toMillis();
        
        return hasRequiredFields && validName && validTimestamp;
      }
      
      // Allow user creation (development mode - permissive)
      allow create: if true;
      
      // Allow user queries for authentication purposes
      allow list: if request.query.limit <= 10;
      
      // Allow users to access their own data when authenticated
      allow get: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to update their own data
      allow update: if request.auth != null && 
                     request.auth.uid == userId &&
                     isValidUserData();
      
      // No user deletion allowed
      allow delete: if false;
    }
    
    // Rules for groups collection - Development Balance
    match /groups/{groupName} {
      function isOwner() {
        return request.auth != null && 
               resource.data.userId == request.auth.uid;
      }
      
      function isValidGroupData() {
        let requiredFields = ['name', 'members', 'timestamp', 'userId'];
        let hasRequiredFields = requiredFields.hasAll(request.resource.data.keys());
        
        // Validate group name
        let validName = request.resource.data.name is string && 
                        request.resource.data.name.size() >= 1 && 
                        request.resource.data.name.size() <= 50;
        
        // Validate members array structure
        let validMembers = request.resource.data.members.size() > 0 && 
                           request.resource.data.members.size() <= 20 && // Max 20 members per group
                           request.resource.data.members is list;
                           
        // Timestamp validation
        let validTimestamp = request.resource.data.timestamp is number &&
                             request.resource.data.timestamp <= request.time.toMillis();
        
        return hasRequiredFields && validName && validMembers && validTimestamp;
      }
      
      // Allow group creation with authentication and validation
      allow create: if request.auth != null && isValidGroupData();
      
      // Allow read access to group owners
      allow get: if request.auth != null && resource.data.userId == request.auth.uid;
      
      // Allow listing groups for authenticated users
      allow list: if request.auth != null && request.query.limit <= 50;
      
      // Allow updates and deletion by group owner
      allow update: if request.auth != null && isOwner() && isValidGroupData();
      allow delete: if request.auth != null && isOwner();
    }
    
    // Default deny for all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
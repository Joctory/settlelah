rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Common validation functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidBillData() {
      let requiredFields = ['members', 'dishes', 'breakdown', 'timestamp', 'perPersonBreakdown', 'totals'];
      let hasRequiredFields = requiredFields.hasAll(request.resource.data.keys());
      
      // Validate dishes array structure
      let validDishes = request.resource.data.dishes.size() > 0 && 
                         request.resource.data.dishes is list;
                         
      // Validate members array structure
      let validMembers = request.resource.data.members.size() > 0 && 
                          request.resource.data.members is list;
                          
      // Timestamp validation
      let validTimestamp = request.resource.data.timestamp is number &&
                           request.resource.data.timestamp <= request.time.toMillis();
      
      return hasRequiredFields && validDishes && validMembers && validTimestamp;
    }
    
    function isBillExpired() {
      // Bill expires after 30 days (2592000000 milliseconds)
      let maxAge = 2592000000;
      return resource.data.timestamp + maxAge < request.time.toMillis();
    }
    
    function isValidBillId(billId) {
      // Validate the bill ID format (timestamp-randomBytes-matterHash or legacy 6-char)
      let newPattern = billId.matches('^[a-zA-Z0-9]+-[a-zA-Z0-9]+-[a-zA-Z0-9]+$');
      let legacyPattern = billId.matches('^[a-zA-Z0-9]{6}$');
      return newPattern || legacyPattern;
    }
    
    // Rules for bills collection
    match /bills/{billId} {
      // Allow reading bills if the ID format is valid and not expired
      allow get: if isValidBillId(billId) && !isBillExpired();
      
      // Deny listing bills
      allow list: if false;
      
      // Allow bill creation with valid data
      allow create: if isValidBillId(billId) && 
                     request.resource.data.timestamp is number;
      
      // Deny deleting bills
      allow delete: if false;
      
      // No updates allowed
      allow update: if false;
      
      // Deny access to sub-collections
      match /{document=**} {
        allow read, write: if false;
      }
    }
    
    // Rules for users collection
    match /users/{userId} {
      // Allow creating new user accounts with proper validation
      allow create: if request.resource.data.keys().hasAll(['name', 'email', 'passcode', 'created_at']);
      
      // Allow reading and querying for user data during login
      allow list: if request.query.filters.size() == 2 && 
                   request.query.filters[0].fieldPath == 'email' && 
                   request.query.filters[1].fieldPath == 'passcode';
      
      // Allow specific user to read/update their own data
      allow get, update: if isOwner(userId);
      
      // Deny all other reads
      allow read: if false;
    }
    
    // Rules for groups collection
    match /groups/{groupName} {
      function isValidGroupData() {
        let requiredFields = ['name', 'members', 'timestamp', 'userId'];
        let hasRequiredFields = requiredFields.hasAll(request.resource.data.keys());
        
        // Validate members array structure
        let validMembers = request.resource.data.members.size() > 0 && 
                           request.resource.data.members is list;
                           
        // Timestamp validation
        let validTimestamp = request.resource.data.timestamp is number &&
                             request.resource.data.timestamp <= request.time.toMillis();
        
        return hasRequiredFields && validMembers && validTimestamp;
      }
      
      // Allow creating groups with valid data for any authenticated user
      allow create: if isValidGroupData() && isOwner(request.resource.data.userId);
      
      // Allow read access to your own groups
      allow get: if isOwner(resource.data.userId);
      
      // Allow listing groups owned by the user
      allow list: if isAuthenticated() && request.query.filters.size() == 1 && request.query.filters[0].fieldPath == 'userId';
      
      // Allow updates and deletion by group owner
      allow update, delete: if isOwner(resource.data.userId);
    }
    
    // Default deny for all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}